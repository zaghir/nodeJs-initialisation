---> pour executer le code javascript
node fichier.js 

npm install --save mongoose
npm install --save underscore

--> npm install --save fawn      pour les transactions ( implementation de Tow Phases Commits) 

npm list    pour voir tous les modules installer dans le projet 
npm list --depth=0  pour voir seulement les noms packages sans le sous packages avec niveau 0 de l'arbre affiché

---> affichier les dependencies d'un module exemple ici pour mongoose
npm view mongoose dependencies

--> affichier les version des parckages ici mongoose
npm view mongoose versions

--> 
npm install helmet

--> middelware pour logger les requetes http Request
npm install morgan

--> module pour la configuration des variables de l'application
npm install config

--> module pour debug 
npm install debug

--> module pour view engine Pug
npm install pug

--> framework pour les tests unitaires 
npm install jest --save-dev 

--> les versions des parckages
"dependencies": {
    "mongoose": "^5.2.13",   <-- Magor.Minor.Patch ,  ^ ==> dire à node de recuprer une version mageure 5 ou plus  == ^5.x
    "underscore": "^1.9.1"   ~ ==> permert de recuprer une version mageure 5 plus une mineure quelque soit le pache ==  ~5.2.x    
  }

--> mise a jour des packages
----> afficher les infomations pour la mise à jour des packages du projet
npm outdated
----> afficher les infomations pour la mise à jour des packages global
npm -g outdated
----> update les packages
npm update  , cette command met a jour avec une version stable mais pas la derniere version   
---- pour recuprer la derniere version , il faut intaller un autre module 
npm install -g  npm-check-updates      apres il faut executer la commande suivante pour le update
npm-check-updates   ou avec shortcut  ==> ncu -u   -u pour upgrade   , jusqu 'a la on a seulement changant dans le fichier package.json
npm install    pour finir la mise à jour 

--> installer les packages que pour l'environement de dev
npm i jshint --save-dev

--> desinstaller un package dans un projet 
npm uninstall mongoose  ou  npm un mongoose
--> desinstaller un package global 
npm uninstall -g nom-du-package  


--> installation de Express
npm install --save Express

--> installer nodemon  => node Monitor  pour le live change du code , sans compiler a chaque fois dans la console
npm install -g nodemon
nodemon nom-fichier    => pour utiliser le watcher de nodemon

-- installer joi => pour la validation des données envoyé par l'utilisation
npm insall joi

-- installtion de mongoDB
recupere l'installation sur le site www.mongodb.com --> download --> onglet Community Server --> selection windows 64
s'il y un probleme d'installion de compase , allez sur le site --> download --> onglet Compase  et choisir la version windows 64
compase c'est un outil offert par mongoDB pour administrer la base

il faut ajouter le path de mongod.exe [le demon ] dans les variables d'environements pour que les commande mongo s execute depuis le CLI windows
dans le termnile de windows 8 executer avanced et ajouter le chemin 
exemple du chemin  C:\Program Files\MongoDB\Server\4.0\bin\mongod.exe

executer dans la cli mondod , si vous avez un probléme avec un message C:\data\db\  , dans ce cas il faut creer le dossier ou mongo staock les données
executer compass avec les configuration par defaut , sur le localhost

